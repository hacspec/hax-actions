name: 'hax'
description: 'Install hax and setup F*'
inputs:
  hax_reference:
    required: true
    default: "main"
  hax_repository:
    required: true
    default: "github:hacspec/hax"
  fstar:
    required: true
runs:
  using: "composite"
  steps:
    - uses: DeterminateSystems/nix-installer-action@main
    - name: Install & configure Cachix
      shell: bash
      run: |
        nix-env --quiet -j8 -iA cachix -f https://cachix.org/api/v1/install
        cachix use hax
    
    - name: Install F*
      shell: bash
      run: |
        VARIANT="Linux-x86_64"
        
        # Find download URL for the Linux build
        if [[ -z "$GH_TOKEN" || ! $(command -v gh) ]]; then
          echo -e "\033[0;31mWARNING: fallback from `gh` to `curl`. You may hit API rate limits.\033[0m"
          if [[ ! $(command -v gh) ]]; then
            echo -e "\033[0;31m         Command `gh` not found.\033[0m"
          fi
          if [[ -z "$GH_TOKEN" ]]; then
            echo -e "\033[0;31m         `GH_TOKEN` is not set.\033[0m"
            echo -e "\033[0;31m         To use GitHub CLI in a GitHub Actions workflow, set the GH_TOKEN environment variable.:\033[0m"
          fi
          ASSETS=$(gh release view "$FSTAR" --repo FStarLang/FStar --json assets)
        else
          ASSETS=$(curl --retry 5 -sL "https://api.github.com/repos/FStarLang/FStar/releases/tags/$FSTAR" ))
        fi
        URL=$(echo "$ASSETS" | jq '.assets.[] | (.url // .browser_download_url) | select(contains("Linux"))' -r)
        # Download
        echo "Trying to download $URL"
        curl -sL "$URL" -o fstar.tar.gz
        # Extract
        tar -xzf fstar.tar.gz

        mv fstar hax-actions-fstar-binary
        echo "$PWD/hax-actions-fstar-binary/bin" >> $GITHUB_PATH
      env:
        FSTAR: "${{ inputs.fstar }}"
        OS: "${{ runner.os }}"

    - name: Install hax
      shell: bash
      run: nix profile install "$FLAKE"#hax
      env:
        FLAKE: "${{ inputs.hax_repository }}/${{ inputs.hax_reference }}"




